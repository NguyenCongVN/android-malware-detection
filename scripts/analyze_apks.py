'''
Bath extract features from a directory of apk files
Directory file name corresponds to apk class name

Usage:
	python3 analyze_apks.py <path/to/apks> <max_threads> <result_files.json>
'''
import sys
import json
import pymongo
import subprocess
from androguard.core.analysis import auto
import threading

lock = threading.Lock()

class AndroTest(auto.DirectoryAndroAnalysis):
	def __init__(self, path, result_file):
		super(AndroTest, self).__init__(path)
		self.has_crashed = False
		self.label = path.split('/')[-1]
		self.result_file = result_file

	def analysis_app(self, log, apkobj, dexobj, analysisobj):
		# Just print all objects to stdout
		result = {}
		apkid_result = subprocess.run(["apkid", "-j", log.filename], stdout=subprocess.PIPE)
		result["file_name"] = log.filename.split("/")[-1]
		result["label"] = self.label
		result["apkid"] = json.loads(apkid_result.stdout)
		result["permissions"] = apkobj.permissions
		result["activity_count"] = len(apkobj.get_activities())
		result["reciever_count"] = len(apkobj.get_receivers())
		result["services_count"] = len(apkobj.get_services())
		result["app_name"] = apkobj.get_app_name()
		result["target_sdk_version"] = apkobj.get_target_sdk_version()
		result["valid_apk"] = apkobj.is_valid_APK()
		result["multi_dex"] = apkobj.is_multidex()
		global lock
		lock.acquire()
		with open(self.result_file, 'a') as f:
			f.write(json.dumps(result))
			f.write(",\n")
		lock.release()

	def finish(self, log):
		# This method can be used to save information in `log`
		# finish is called regardless of a crash, so maybe store the
		# information somewhere
		if self.has_crashed:
			print("Analysis of {} has finished with Errors".format(log))
		else:
			print("Analysis of {} has finished!".format(log))

	def crash(self, log, why):
		# If some error happens during the analysis, this method will be
		# called
		self.has_crashed = True
		print("Error during analysis of {}: {}".format(log, why), file=sys.stderr)

if __name__ == "__main__":
	settings = {
		"my": AndroTest(sys.argv[1], sys.argv[3]),
		"log": auto.DefaultAndroLog,
		"max_fetcher": int(sys.argv[2]),
	}
	aa = auto.AndroAuto(settings)
	aa.go()
