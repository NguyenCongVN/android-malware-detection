import sys
import json
from pathlib import Path
from androguard.core.analysis import auto
import threading

lock = threading.Lock()


class AndroTest(auto.DirectoryAndroAnalysis):
    def __init__(self, path, result_file):
        super(AndroTest, self).__init__(path)
        self.has_crashed = False
        self.label = path.split('/')[-1]
        self.result_file = result_file

    def analysis_app(self, log, apkobj, dexobj, analysisobj):
        # Just print all objects to stdout
        result = {}
        result["file_name"] = log.filename.split("/")[-1]
        result["label"] = self.label
        result["permissions"] = apkobj.permissions
        result["used_permissions"] = list(
            {permission for method, permissions in analysisobj.get_permissions() for permission in permissions})
        result["activity_count"] = len(apkobj.get_activities())
        result["reciever_count"] = len(apkobj.get_receivers())
        result["services_count"] = len(apkobj.get_services())
        result["valid_apk"] = apkobj.is_valid_APK()
        result["multi_dex"] = apkobj.is_multidex()
        result["size"] = Path(log.filename).stat().st_size
        result["methods_count"] = len(analysisobj.methods)
        result["external_methods_count"] = len([x for x in analysisobj.methods.values() if x.is_external()])
        result["classes_count"] = len(analysisobj.classes)
        result["external_classes_count"] = len([x for x in analysisobj.classes.values() if x.is_external()])
        global lock
        lock.acquire()
        with open(self.result_file, 'a') as f:
            f.write(json.dumps(result, sort_keys=True, indent=4))
            f.write(",\n")
        lock.release()

    def finish(self, log):
        # This method can be used to save information in `log`
        # finish is called regardless of a crash, so maybe store the
        # information somewhere
        if self.has_crashed:
            print("Analysis of {} has finished with Errors".format(log))
        else:
            print("Analysis of {} has finished!".format(log))

    def crash(self, log, why):
        # If some error happens during the analysis, this method will be
        # called
        self.has_crashed = True
        print("Error during analysis of {}: {}".format(log, why), file=sys.stderr)


if __name__ == "__main__":
    settings = {
        "my": AndroTest(sys.argv[1], sys.argv[3]),
        "log": auto.DefaultAndroLog,
        "max_fetcher": int(sys.argv[2]),
    }
    aa = auto.AndroAuto(settings)
    aa.go()
