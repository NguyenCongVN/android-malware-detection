import os
from pathlib import Path

import hydra
import datetime
from omegaconf import DictConfig
from pytorch_lightning import Trainer
from pytorch_lightning.callbacks import ModelCheckpoint

from core.data_module import MalwareDataModule
from core.model import MalwareDetector


@hydra.main(config_path="config", config_name="conf")
def train_model(cfg: DictConfig) -> None:
    cwd = Path(hydra.utils.get_original_cwd())
    dataset_directory = cwd / Path(cfg['dataloader']['data_dir'])
    if not dataset_directory.exists():
        raise FileNotFoundError(f'{dataset_directory} does not exist. Could not read data from it.')
    data_module = MalwareDataModule(
        data_dir=dataset_directory,
        batch_size=cfg['dataloader']['batch_size'],
        split_ratios=[0.4, 0.3, 0.3],
        balanced=bool(cfg['dataloader']['balanced']),
        cache=cfg['dataloader']['cache'],
        pin_memory=cfg['dataloader']['pin_memory'],
        num_workers=cfg['dataloader']['num_workers']
    )
    convolution_count = cfg['model']['convolution_count']
    convolution_dimensions = [64, 64, 32][:min(convolution_count, 3)]
    feature_list = cfg['features']['attributes']
    readout_weights = cfg['features']['readout_weights']
    input_size = cfg['features']['size']
    gpu = cfg['trainer']['gpu']
    model = MalwareDetector(input_size, convolution_dimensions, feature_list, readout_weights)
    checkpoint_callback = ModelCheckpoint(
        dirpath=os.getcwd(),
        filename=str('20201123-{epoch:02d}-{val_loss:.2f}.pt'),
        monitor='val_loss',
        mode='min',
        save_last=True
    )
    num_epochs = cfg['trainer']['num_epochs']
    trainer_kwargs = {'gpus': [int(gpu)]} if gpu != 'none' else {}
    trainer = Trainer(callbacks=[checkpoint_callback], max_epochs=num_epochs, **trainer_kwargs)
    trainer.fit(model, data_module)


if __name__ == '__main__':
    train_model()
