import torch
from pytorch_lightning.metrics import Metric
from pytorch_lightning.metrics.functional import roc, auroc


class ROC_AUC(Metric):
    def __init__(self, dist_sync_on_step=False):
        super().__init__(dist_sync_on_step=dist_sync_on_step)

        self.add_state("preds", default=[], dist_reduce_fx="sum")
        self.add_state("target", default=[], dist_reduce_fx="sum")

    def update(self, preds: torch.Tensor, target: torch.Tensor):
        assert preds.shape == target.shape

        self.preds.append(preds)
        self.target.append(target)

    def compute(self):
        preds = torch.cat(self.preds, dim=0)
        target = torch.cat(self.target, dim=0)
        roc_values = roc(preds, target, pos_label=1)
        au_roc = auroc(preds, target, pos_label=1)
        return roc_values, au_roc
