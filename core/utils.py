import matplotlib.pyplot as plt
import pandas as pd
import pytorch_lightning.metrics.functional as M
import torch
from dgl.ops import segment


def readout_nodes(graph, feat, weight=None, *, op='sum', ntype=None, bool_weights=False):
    """
    Taken and modified from https://github.com/dmlc/dgl/blob/master/python/dgl/readout.py#L13
    """
    x = graph.nodes[ntype].data[feat]
    if weight is not None:
        w = graph.nodes[ntype].data[weight]
        if not bool_weights:
            x = x * w
        else:
            x[torch.where(w == 0)] = 0
    return segment.segment_reduce(graph.batch_num_nodes(ntype), x, reducer=op)


def plot_roc(fpr, tpr, thresholds):
    auc = M.classification.auc(fpr, tpr)
    combined = torch.cat([x.view(-1, 1) for x in [tpr.t(), fpr.t(), thresholds.t()]], dim=1).numpy()
    pd.DataFrame.from_records(combined, columns=['tpr', 'fpr', 'thresholds']).to_csv('auc_roc.csv')
    plt.plot(fpr, tpr)
    plt.title(f"AUC = {auc}")
    plt.tight_layout()
    plt.savefig("auc_roc.pdf")
