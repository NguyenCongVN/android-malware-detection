from typing import List, Tuple

import dgl
import pytorch_lightning as pl
import pytorch_lightning.metrics as metrics
import torch
import torch.nn.functional as F
from dgl.nn import Sequential
import dgl.nn.pytorch as graph_nn
from torch import nn

from scripts.process_dataset import get_api_list
from .metrics import ROC_AUC
from .utils import readout_nodes


class MalwareDetector(pl.LightningModule):
    def __init__(self,
                 input_dimension,
                 convolution_algorithm='GCN',
                 convolution_dimensions: List[int] = [],
                 readout_weights: str = 'all',
                 readout_type: str = 'mean'
                 ):
        super().__init__()
        supported_algorithms = ['GCN', 'SAGE', 'TAG', 'SGConv', 'DotGatConv']
        if readout_weights != 'internal' and readout_weights != 'external' and readout_weights != 'all':
            raise ValueError(f"aggregator_type must be one of 'internal', 'external or 'all'. Got '{readout_weights}'")
        if convolution_algorithm not in supported_algorithms:
            raise ValueError(f"${convolution_algorithm} not supported. Supported algorithms are {supported_algorithms}")
        self.save_hyperparameters()
        self.convolution_layers = []
        for dimension in convolution_dimensions:
            layer = None
            if convolution_algorithm == "GCN":
                layer = graph_nn.GraphConv(input_dimension, dimension, activation=F.relu)
            elif convolution_algorithm == "SAGE":
                layer = graph_nn.SAGEConv(input_dimension, dimension, activation=F.relu, aggregator_type='mean',
                                          norm=F.normalize)
            elif convolution_algorithm == "TAG":
                layer = graph_nn.TAGConv(input_dimension, dimension, k=4)
            elif convolution_algorithm == 'SGConv':
                layer = graph_nn.SGConv(input_dimension, dimension, k=4)
            elif convolution_algorithm == "DotGatConv":
                layer = graph_nn.DotGatConv(input_dimension, dimension)
            self.convolution_layers.append(layer)
            input_dimension = dimension
        self.convolution_layers = Sequential(*self.convolution_layers)
        self.last_dimension = input_dimension
        self.classify = nn.Linear(input_dimension, 1)
        self.loss_func = nn.BCEWithLogitsLoss()

        self.accuracy = metrics.Accuracy()
        self.recall = metrics.Recall(num_classes=1)
        self.f1 = metrics.FBeta(num_classes=1)
        self.precision_ = metrics.Precision(num_classes=1)
        self.auc_roc = ROC_AUC()

        self.api_list_length = len(get_api_list())

    def _process_api_package(self, g: dgl.DGLGraph) -> dgl.DGLGraph:
        nodes = torch.arange(len(g.nodes()), device=self.device)
        api_packages = g.ndata['api_package']
        dim_0 = nodes[torch.where(api_packages >= 0)].view(-1, 1)
        dim_1 = api_packages[torch.where(api_packages >= 0)].view(-1, 1)
        indices = torch.cat([dim_0, dim_1], dim=1).t()
        values = torch.ones(len(dim_0), device=self.device)
        size = torch.Size([len(g.nodes()), self.api_list_length])
        g.ndata['api_package'] = torch.sparse.ShortTensor(indices, values, size).to_dense().squeeze()
        return g

    def forward(self, g: dgl.DGLGraph) -> torch.Tensor:
        if len(g.ndata.keys()) > 1:
            if 'api_package' in g.ndata:
                g = self._process_api_package(g)
            if 'opcodes' in g.ndata:
                g.ndata['opcodes'] = g.ndata['opcodes'].squeeze()
            h = torch.cat([g.ndata[x] for x in g.ndata.keys() if x != 'ex'], dim=1).float()
        else:
            h = (g.in_degrees() + g.out_degrees()).view(-1, 1).float()
        h = self.convolution_layers(g, h)
        g.ndata['h'] = h if len(self.convolution_layers) > 0 else h[0]
        args = ['weight']
        kwargs = {'bool_weights': True}
        if self.hparams.readout_weights == 'internal':
            g.ndata['weight'] = (1 - g.ndata['ex'].float())
        elif self.hparams.readout_weights == 'external':
            g.ndata['weight'] = (g.ndata['ex'].float())
        else:  # All
            args = []
            kwargs = {}
        # Calculate graph representation by averaging all the node representations.
        hg = readout_nodes(g, 'h', op=self.hparams.readout_type, *args, **kwargs)
        return self.classify(hg).squeeze()

    def training_step(self, batch: Tuple[dgl.DGLGraph, torch.Tensor], batch_idx: int) -> torch.Tensor:
        bg, label = batch
        prediction = self.forward(bg)
        loss = self.loss_func(prediction, label)
        self.log('train_loss', loss, on_step=True, on_epoch=True)
        return loss

    def validation_step(self, batch: Tuple[dgl.DGLGraph, torch.Tensor], batch_idx: int):
        bg, label = batch
        prediction = self.forward(bg)
        loss = self.loss_func(prediction, label)
        self.log('val_loss', loss, on_step=False, on_epoch=True)

    def test_step(self, batch: Tuple[dgl.DGLGraph, torch.Tensor], batch_idx: int):
        bg, label = batch
        prediction = self.forward(bg)
        logits = torch.sigmoid(prediction)
        _ = self.auc_roc(logits, label)
        test_metrics = {
            'test_loss': self.loss_func(prediction, label),
            'test_accuracy': self.accuracy(logits, label),
            'test_precision': self.precision_(logits, label),
            'test_recall': self.recall(logits, label),
            'test_f1': self.f1(logits, label),
        }
        self.log_dict(test_metrics, on_step=False, on_epoch=True)

    def configure_optimizers(self) -> torch.optim.Adam:
        optimizer = torch.optim.Adam(self.parameters(), lr=5e-3)
        return optimizer
